package org.hdf5javalib.examples.h5ex_d;

import org.hdf5javalib.dataclass.HdfData;
import org.hdf5javalib.datasource.TypedDataSource;
import org.hdf5javalib.examples.ResourceLoader;
import org.hdf5javalib.hdffile.dataobjects.messages.DataLayoutMessage;
import org.hdf5javalib.hdffile.dataobjects.messages.ExternalDataFilesMessage;
import org.hdf5javalib.hdfjava.HdfDataset;
import org.hdf5javalib.hdfjava.HdfFileReader;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.nio.channels.SeekableByteChannel;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class H5exDReadTest {

    private int[][] toIntMatrix(HdfData[][] data) throws IOException, InvocationTargetException, InstantiationException, IllegalAccessException {
        int[][] res = new int[data.length][data[0].length];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[i].length; j++) {
                res[i][j] = data[i][j].getInstance(Long.class).intValue();
            }
        }
        return res;
    }

    private BigDecimal[][] toBigDecimalMatrix(HdfData[][] data) throws IOException, InvocationTargetException, InstantiationException, IllegalAccessException {
        BigDecimal[][] res = new BigDecimal[data.length][data[0].length];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[i].length; j++) {
                res[i][j] = data[i][j].getInstance(BigDecimal.class);
            }
        }
        return res;
    }

    private int[][] generateExpectedIntMatrix(int rows, int cols) {
        int[][] exp = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            int mul = (i == 0) ? -1 : (i == 1) ? 0 : i - 1;
            for (int j = 0; j < cols; j++) {
                exp[i][j] = mul * j;
            }
        }
        return exp;
    }

    @Test
    void testAlloc() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_alloc.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = generateExpectedIntMatrix(4, 7);
            assertArrayEquals(expected, toIntMatrix(data));
            HdfDataset dataSet2 = reader.getDataset("/DS2").orElseThrow();
            data = new TypedDataSource<>(channel, reader, dataSet2, HdfData.class).readMatrix();
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testChecksum() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_checksum.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = generateExpectedIntMatrix(32, 64);
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testChunk() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_chunk.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {0, 1, 0, 0, 1, 0, 0, 1},
                    {1, 1, 0, 1, 1, 0, 1, 1},
                    {0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 1, 0, 0, 1, 0, 0, 1},
                    {1, 1, 0, 1, 1, 0, 1, 1},
                    {0, 0, 0, 0, 0, 0, 0, 0}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testCompact() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_compact.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = generateExpectedIntMatrix(4, 7);
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testExtern() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_extern.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            try (HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow() ) {
                DataLayoutMessage layout = dataSet.getObjectHeader().findMessageByType(DataLayoutMessage.class).orElseThrow();
                assertInstanceOf(DataLayoutMessage.ContiguousStorage.class, layout.getDataLayoutStorage());
                DataLayoutMessage.ContiguousStorage cont = (DataLayoutMessage.ContiguousStorage) layout.getDataLayoutStorage();
                assertTrue(cont.getDataAddress().isUndefined());
                ExternalDataFilesMessage external = dataSet.getObjectHeader().getHeaderMessages().stream()
                        .filter(m -> m instanceof ExternalDataFilesMessage)
                        .map(ExternalDataFilesMessage.class::cast)
                        .findFirst().orElse(null);
                assertNotNull(external);
                assertEquals(1, external.getUsedSlots());
                List<ExternalDataFilesMessage.SlotDefinition> slots = external.getSlotDefinitions();
                assertEquals(1, slots.size());
                assertEquals(8, slots.get(0).nameOffset().getInstance(Long.class).intValue());
                assertEquals(0, slots.get(0).fileOffset().getInstance(Long.class).intValue());
                assertTrue(slots.get(0).dataSize().isUndefined());
            }
        }
    }

    @Test
    void testFillval() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_fillval.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {0, -1, -2, -3, -4, -5, -6, 99, 99, 99},
                    {0, 0, 0, 0, 0, 0, 0, 99, 99, 99},
                    {0, 1, 2, 3, 4, 5, 6, 99, 99, 99},
                    {0, 2, 4, 6, 8, 10, 12, 99, 99, 99},
                    {99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
                    {99, 99, 99, 99, 99, 99, 99, 99, 99, 99}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testGzip() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_gzip.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = generateExpectedIntMatrix(32, 64);
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testHyper() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_hyper.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {0, 1, 0, 0, 1, 0, 0, 1},
                    {1, 1, 0, 1, 1, 0, 1, 1},
                    {0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 1, 0, 0, 1, 0, 0, 1},
                    {1, 1, 0, 1, 1, 0, 1, 1},
                    {0, 0, 0, 0, 0, 0, 0, 0}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testNbit() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_nbit.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            BigDecimal[][] expected = new BigDecimal[][] {
                    {new BigDecimal("-8.00000"), new BigDecimal("-0.03125"), new BigDecimal("-0.06250"), new BigDecimal("-0.09375"), new BigDecimal("-0.12500"), new BigDecimal("-0.15625"), new BigDecimal("-0.18750"), new BigDecimal("7.78125"), new BigDecimal("-0.25000"), new BigDecimal("-0.28125"), new BigDecimal("-0.31250"), new BigDecimal("-0.34375"), new BigDecimal("-0.37500"), new BigDecimal("-0.40625"), new BigDecimal("-0.43750"), new BigDecimal("7.53125"), new BigDecimal("-0.50000"), new BigDecimal("-0.53125"), new BigDecimal("-0.56250"), new BigDecimal("-0.59375"), new BigDecimal("-0.62500"), new BigDecimal("-0.65625"), new BigDecimal("-0.68750"), new BigDecimal("7.28125"), new BigDecimal("-0.75000"), new BigDecimal("-0.78125"), new BigDecimal("-0.81250"), new BigDecimal("-0.84375"), new BigDecimal("-0.87500"), new BigDecimal("-0.90625"), new BigDecimal("-0.93750"), new BigDecimal("7.03125"), new BigDecimal("-1.00000"), new BigDecimal("-1.03125"), new BigDecimal("-1.06250"), new BigDecimal("-1.09375"), new BigDecimal("-1.12500"), new BigDecimal("-1.15625"), new BigDecimal("-1.18750"), new BigDecimal("6.78125"), new BigDecimal("-1.25000"), new BigDecimal("-1.28125"), new BigDecimal("-1.31250"), new BigDecimal("-1.34375"), new BigDecimal("-1.37500"), new BigDecimal("-1.40625"), new BigDecimal("-1.43750"), new BigDecimal("6.53125"), new BigDecimal("-1.50000"), new BigDecimal("-1.53125"), new BigDecimal("-1.56250"), new BigDecimal("-1.59375"), new BigDecimal("-1.62500"), new BigDecimal("-1.65625"), new BigDecimal("-1.68750"), new BigDecimal("6.28125"), new BigDecimal("-1.75000"), new BigDecimal("-1.78125"), new BigDecimal("-1.81250"), new BigDecimal("-1.84375"), new BigDecimal("-1.87500"), new BigDecimal("-1.90625"), new BigDecimal("-1.93750"), new BigDecimal("6.03125")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000"), new BigDecimal("0.00000")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.03125"), new BigDecimal("0.06250"), new BigDecimal("0.09375"), new BigDecimal("0.12500"), new BigDecimal("0.15625"), new BigDecimal("0.18750"), new BigDecimal("0.21875"), new BigDecimal("0.25000"), new BigDecimal("0.28125"), new BigDecimal("0.31250"), new BigDecimal("0.34375"), new BigDecimal("0.37500"), new BigDecimal("0.40625"), new BigDecimal("0.43750"), new BigDecimal("0.46875"), new BigDecimal("0.50000"), new BigDecimal("0.53125"), new BigDecimal("0.56250"), new BigDecimal("0.59375"), new BigDecimal("0.62500"), new BigDecimal("0.65625"), new BigDecimal("0.68750"), new BigDecimal("0.71875"), new BigDecimal("0.75000"), new BigDecimal("0.78125"), new BigDecimal("0.81250"), new BigDecimal("0.84375"), new BigDecimal("0.87500"), new BigDecimal("0.90625"), new BigDecimal("0.93750"), new BigDecimal("0.96875"), new BigDecimal("1.00000"), new BigDecimal("1.03125"), new BigDecimal("1.06250"), new BigDecimal("1.09375"), new BigDecimal("1.12500"), new BigDecimal("1.15625"), new BigDecimal("1.18750"), new BigDecimal("1.21875"), new BigDecimal("1.25000"), new BigDecimal("1.28125"), new BigDecimal("1.31250"), new BigDecimal("1.34375"), new BigDecimal("1.37500"), new BigDecimal("1.40625"), new BigDecimal("1.43750"), new BigDecimal("1.46875"), new BigDecimal("1.50000"), new BigDecimal("1.53125"), new BigDecimal("1.56250"), new BigDecimal("1.59375"), new BigDecimal("1.62500"), new BigDecimal("1.65625"), new BigDecimal("1.68750"), new BigDecimal("1.71875"), new BigDecimal("1.75000"), new BigDecimal("1.78125"), new BigDecimal("1.81250"), new BigDecimal("1.84375"), new BigDecimal("1.87500"), new BigDecimal("1.90625"), new BigDecimal("1.93750"), new BigDecimal("1.96875")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.06250"), new BigDecimal("0.12500"), new BigDecimal("0.18750"), new BigDecimal("0.25000"), new BigDecimal("0.31250"), new BigDecimal("0.37500"), new BigDecimal("0.43750"), new BigDecimal("0.50000"), new BigDecimal("0.56250"), new BigDecimal("0.62500"), new BigDecimal("0.68750"), new BigDecimal("0.75000"), new BigDecimal("0.81250"), new BigDecimal("0.87500"), new BigDecimal("0.93750"), new BigDecimal("1.00000"), new BigDecimal("1.06250"), new BigDecimal("1.12500"), new BigDecimal("1.18750"), new BigDecimal("1.25000"), new BigDecimal("1.31250"), new BigDecimal("1.37500"), new BigDecimal("1.43750"), new BigDecimal("1.50000"), new BigDecimal("1.56250"), new BigDecimal("1.62500"), new BigDecimal("1.68750"), new BigDecimal("1.75000"), new BigDecimal("1.81250"), new BigDecimal("1.87500"), new BigDecimal("1.93750"), new BigDecimal("2.00000"), new BigDecimal("2.06250"), new BigDecimal("2.12500"), new BigDecimal("2.18750"), new BigDecimal("2.25000"), new BigDecimal("2.31250"), new BigDecimal("2.37500"), new BigDecimal("2.43750"), new BigDecimal("2.50000"), new BigDecimal("2.56250"), new BigDecimal("2.62500"), new BigDecimal("2.68750"), new BigDecimal("2.75000"), new BigDecimal("2.81250"), new BigDecimal("2.87500"), new BigDecimal("2.93750"), new BigDecimal("3.00000"), new BigDecimal("3.06250"), new BigDecimal("3.12500"), new BigDecimal("3.18750"), new BigDecimal("3.25000"), new BigDecimal("3.31250"), new BigDecimal("3.37500"), new BigDecimal("3.43750"), new BigDecimal("3.50000"), new BigDecimal("3.56250"), new BigDecimal("3.62500"), new BigDecimal("3.68750"), new BigDecimal("3.75000"), new BigDecimal("3.81250"), new BigDecimal("3.87500"), new BigDecimal("3.93750")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.09375"), new BigDecimal("0.18750"), new BigDecimal("0.28125"), new BigDecimal("0.37500"), new BigDecimal("0.46875"), new BigDecimal("0.56250"), new BigDecimal("0.65625"), new BigDecimal("0.75000"), new BigDecimal("0.84375"), new BigDecimal("0.93750"), new BigDecimal("1.03125"), new BigDecimal("1.12500"), new BigDecimal("1.21875"), new BigDecimal("1.31250"), new BigDecimal("1.40625"), new BigDecimal("1.50000"), new BigDecimal("1.59375"), new BigDecimal("1.68750"), new BigDecimal("1.78125"), new BigDecimal("1.87500"), new BigDecimal("1.96875"), new BigDecimal("2.06250"), new BigDecimal("2.15625"), new BigDecimal("2.25000"), new BigDecimal("2.34375"), new BigDecimal("2.43750"), new BigDecimal("2.53125"), new BigDecimal("2.62500"), new BigDecimal("2.71875"), new BigDecimal("2.81250"), new BigDecimal("2.90625"), new BigDecimal("3.00000"), new BigDecimal("3.09375"), new BigDecimal("3.18750"), new BigDecimal("3.28125"), new BigDecimal("3.37500"), new BigDecimal("3.46875"), new BigDecimal("3.56250"), new BigDecimal("3.65625"), new BigDecimal("3.75000"), new BigDecimal("3.84375"), new BigDecimal("3.93750"), new BigDecimal("4.03125"), new BigDecimal("4.12500"), new BigDecimal("4.21875"), new BigDecimal("4.31250"), new BigDecimal("4.40625"), new BigDecimal("4.50000"), new BigDecimal("4.59375"), new BigDecimal("4.68750"), new BigDecimal("4.78125"), new BigDecimal("4.87500"), new BigDecimal("4.96875"), new BigDecimal("5.06250"), new BigDecimal("5.15625"), new BigDecimal("5.25000"), new BigDecimal("5.34375"), new BigDecimal("5.43750"), new BigDecimal("5.53125"), new BigDecimal("5.62500"), new BigDecimal("5.71875"), new BigDecimal("5.81250"), new BigDecimal("5.90625")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.12500"), new BigDecimal("0.25000"), new BigDecimal("0.37500"), new BigDecimal("0.50000"), new BigDecimal("0.62500"), new BigDecimal("0.75000"), new BigDecimal("0.87500"), new BigDecimal("1.00000"), new BigDecimal("1.12500"), new BigDecimal("1.25000"), new BigDecimal("1.37500"), new BigDecimal("1.50000"), new BigDecimal("1.62500"), new BigDecimal("1.75000"), new BigDecimal("1.87500"), new BigDecimal("2.00000"), new BigDecimal("2.12500"), new BigDecimal("2.25000"), new BigDecimal("2.37500"), new BigDecimal("2.50000"), new BigDecimal("2.62500"), new BigDecimal("2.75000"), new BigDecimal("2.87500"), new BigDecimal("3.00000"), new BigDecimal("3.12500"), new BigDecimal("3.25000"), new BigDecimal("3.37500"), new BigDecimal("3.50000"), new BigDecimal("3.62500"), new BigDecimal("3.75000"), new BigDecimal("3.87500"), new BigDecimal("4.00000"), new BigDecimal("4.12500"), new BigDecimal("4.25000"), new BigDecimal("4.37500"), new BigDecimal("4.50000"), new BigDecimal("4.62500"), new BigDecimal("4.75000"), new BigDecimal("4.87500"), new BigDecimal("5.00000"), new BigDecimal("5.12500"), new BigDecimal("5.25000"), new BigDecimal("5.37500"), new BigDecimal("5.50000"), new BigDecimal("5.62500"), new BigDecimal("5.75000"), new BigDecimal("5.87500"), new BigDecimal("6.00000"), new BigDecimal("6.12500"), new BigDecimal("6.25000"), new BigDecimal("6.37500"), new BigDecimal("6.50000"), new BigDecimal("6.62500"), new BigDecimal("6.75000"), new BigDecimal("6.87500"), new BigDecimal("7.00000"), new BigDecimal("7.12500"), new BigDecimal("7.25000"), new BigDecimal("7.37500"), new BigDecimal("7.50000"), new BigDecimal("7.62500"), new BigDecimal("7.75000"), new BigDecimal("15.87500")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.15625"), new BigDecimal("0.31250"), new BigDecimal("0.46875"), new BigDecimal("0.62500"), new BigDecimal("0.78125"), new BigDecimal("0.93750"), new BigDecimal("1.09375"), new BigDecimal("1.25000"), new BigDecimal("1.40625"), new BigDecimal("1.56250"), new BigDecimal("1.71875"), new BigDecimal("1.87500"), new BigDecimal("2.03125"), new BigDecimal("2.18750"), new BigDecimal("2.34375"), new BigDecimal("2.50000"), new BigDecimal("2.65625"), new BigDecimal("2.81250"), new BigDecimal("2.96875"), new BigDecimal("3.12500"), new BigDecimal("3.28125"), new BigDecimal("3.43750"), new BigDecimal("3.59375"), new BigDecimal("3.75000"), new BigDecimal("3.90625"), new BigDecimal("4.06250"), new BigDecimal("4.21875"), new BigDecimal("4.37500"), new BigDecimal("4.53125"), new BigDecimal("4.68750"), new BigDecimal("4.84375"), new BigDecimal("5.00000"), new BigDecimal("5.15625"), new BigDecimal("5.31250"), new BigDecimal("5.46875"), new BigDecimal("5.62500"), new BigDecimal("5.78125"), new BigDecimal("5.93750"), new BigDecimal("6.09375"), new BigDecimal("6.25000"), new BigDecimal("6.40625"), new BigDecimal("6.56250"), new BigDecimal("6.71875"), new BigDecimal("6.87500"), new BigDecimal("7.03125"), new BigDecimal("7.18750"), new BigDecimal("7.34375"), new BigDecimal("7.50000"), new BigDecimal("7.65625"), new BigDecimal("7.81250"), new BigDecimal("15.96875"), new BigDecimal("8.12500"), new BigDecimal("8.28125"), new BigDecimal("8.43750"), new BigDecimal("8.59375"), new BigDecimal("8.75000"), new BigDecimal("8.90625"), new BigDecimal("9.06250"), new BigDecimal("9.21875"), new BigDecimal("9.37500"), new BigDecimal("9.53125"), new BigDecimal("9.68750"), new BigDecimal("9.84375")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.18750"), new BigDecimal("0.37500"), new BigDecimal("0.56250"), new BigDecimal("0.75000"), new BigDecimal("0.93750"), new BigDecimal("1.12500"), new BigDecimal("1.31250"), new BigDecimal("1.50000"), new BigDecimal("1.68750"), new BigDecimal("1.87500"), new BigDecimal("2.06250"), new BigDecimal("2.25000"), new BigDecimal("2.43750"), new BigDecimal("2.62500"), new BigDecimal("2.81250"), new BigDecimal("3.00000"), new BigDecimal("3.18750"), new BigDecimal("3.37500"), new BigDecimal("3.56250"), new BigDecimal("3.75000"), new BigDecimal("3.93750"), new BigDecimal("4.12500"), new BigDecimal("4.31250"), new BigDecimal("4.50000"), new BigDecimal("4.68750"), new BigDecimal("4.87500"), new BigDecimal("5.06250"), new BigDecimal("5.25000"), new BigDecimal("5.43750"), new BigDecimal("5.62500"), new BigDecimal("5.81250"), new BigDecimal("6.00000"), new BigDecimal("6.18750"), new BigDecimal("6.37500"), new BigDecimal("6.56250"), new BigDecimal("6.75000"), new BigDecimal("6.93750"), new BigDecimal("7.12500"), new BigDecimal("7.31250"), new BigDecimal("7.50000"), new BigDecimal("7.68750"), new BigDecimal("15.87500"), new BigDecimal("8.06250"), new BigDecimal("8.25000"), new BigDecimal("8.43750"), new BigDecimal("8.62500"), new BigDecimal("0.81250"), new BigDecimal("9.00000"), new BigDecimal("9.18750"), new BigDecimal("9.37500"), new BigDecimal("9.56250"), new BigDecimal("9.75000"), new BigDecimal("9.93750"), new BigDecimal("10.12500"), new BigDecimal("2.31250"), new BigDecimal("10.50000"), new BigDecimal("10.68750"), new BigDecimal("10.87500"), new BigDecimal("11.06250"), new BigDecimal("11.25000"), new BigDecimal("11.43750"), new BigDecimal("11.62500"), new BigDecimal("3.81250")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.21875"), new BigDecimal("0.43750"), new BigDecimal("0.65625"), new BigDecimal("0.87500"), new BigDecimal("1.09375"), new BigDecimal("1.31250"), new BigDecimal("1.53125"), new BigDecimal("1.75000"), new BigDecimal("1.96875"), new BigDecimal("2.18750"), new BigDecimal("2.40625"), new BigDecimal("2.62500"), new BigDecimal("2.84375"), new BigDecimal("3.06250"), new BigDecimal("3.28125"), new BigDecimal("3.50000"), new BigDecimal("3.71875"), new BigDecimal("3.93750"), new BigDecimal("4.15625"), new BigDecimal("4.37500"), new BigDecimal("4.59375"), new BigDecimal("4.81250"), new BigDecimal("5.03125"), new BigDecimal("5.25000"), new BigDecimal("5.46875"), new BigDecimal("5.68750"), new BigDecimal("5.90625"), new BigDecimal("6.12500"), new BigDecimal("6.34375"), new BigDecimal("6.56250"), new BigDecimal("6.78125"), new BigDecimal("7.00000"), new BigDecimal("7.21875"), new BigDecimal("7.43750"), new BigDecimal("7.65625"), new BigDecimal("15.87500"), new BigDecimal("8.09375"), new BigDecimal("8.31250"), new BigDecimal("8.53125"), new BigDecimal("8.75000"), new BigDecimal("8.96875"), new BigDecimal("9.18750"), new BigDecimal("9.40625"), new BigDecimal("9.62500"), new BigDecimal("9.84375"), new BigDecimal("10.06250"), new BigDecimal("10.28125"), new BigDecimal("10.50000"), new BigDecimal("10.71875"), new BigDecimal("10.93750"), new BigDecimal("11.15625"), new BigDecimal("11.37500"), new BigDecimal("11.59375"), new BigDecimal("11.81250"), new BigDecimal("12.03125"), new BigDecimal("12.25000"), new BigDecimal("12.46875"), new BigDecimal("12.68750"), new BigDecimal("12.90625"), new BigDecimal("13.12500"), new BigDecimal("13.34375"), new BigDecimal("13.56250"), new BigDecimal("13.78125")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.25000"), new BigDecimal("0.50000"), new BigDecimal("0.75000"), new BigDecimal("1.00000"), new BigDecimal("1.25000"), new BigDecimal("1.50000"), new BigDecimal("1.75000"), new BigDecimal("2.00000"), new BigDecimal("2.25000"), new BigDecimal("2.50000"), new BigDecimal("2.75000"), new BigDecimal("3.00000"), new BigDecimal("3.25000"), new BigDecimal("3.50000"), new BigDecimal("3.75000"), new BigDecimal("4.00000"), new BigDecimal("4.25000"), new BigDecimal("4.50000"), new BigDecimal("4.75000"), new BigDecimal("5.00000"), new BigDecimal("5.25000"), new BigDecimal("5.50000"), new BigDecimal("5.75000"), new BigDecimal("6.00000"), new BigDecimal("6.25000"), new BigDecimal("6.50000"), new BigDecimal("6.75000"), new BigDecimal("7.00000"), new BigDecimal("7.25000"), new BigDecimal("7.50000"), new BigDecimal("7.75000"), new BigDecimal("8.00000"), new BigDecimal("8.25000"), new BigDecimal("8.50000"), new BigDecimal("8.75000"), new BigDecimal("9.00000"), new BigDecimal("9.25000"), new BigDecimal("9.50000"), new BigDecimal("9.75000"), new BigDecimal("10.00000"), new BigDecimal("10.25000"), new BigDecimal("10.50000"), new BigDecimal("10.75000"), new BigDecimal("11.00000"), new BigDecimal("11.25000"), new BigDecimal("11.50000"), new BigDecimal("11.75000"), new BigDecimal("12.00000"), new BigDecimal("12.25000"), new BigDecimal("12.50000"), new BigDecimal("12.75000"), new BigDecimal("13.00000"), new BigDecimal("13.25000"), new BigDecimal("13.50000"), new BigDecimal("13.75000"), new BigDecimal("14.00000"), new BigDecimal("14.25000"), new BigDecimal("14.50000"), new BigDecimal("14.75000"), new BigDecimal("15.00000"), new BigDecimal("15.25000"), new BigDecimal("15.50000"), new BigDecimal("15.75000")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.28125"), new BigDecimal("0.56250"), new BigDecimal("0.84375"), new BigDecimal("1.12500"), new BigDecimal("1.40625"), new BigDecimal("1.68750"), new BigDecimal("1.96875"), new BigDecimal("2.25000"), new BigDecimal("2.53125"), new BigDecimal("2.81250"), new BigDecimal("3.09375"), new BigDecimal("3.37500"), new BigDecimal("3.65625"), new BigDecimal("3.93750"), new BigDecimal("4.21875"), new BigDecimal("4.50000"), new BigDecimal("4.78125"), new BigDecimal("5.06250"), new BigDecimal("5.34375"), new BigDecimal("5.62500"), new BigDecimal("5.90625"), new BigDecimal("6.18750"), new BigDecimal("6.46875"), new BigDecimal("6.75000"), new BigDecimal("7.03125"), new BigDecimal("7.31250"), new BigDecimal("7.59375"), new BigDecimal("15.87500"), new BigDecimal("8.15625"), new BigDecimal("8.43750"), new BigDecimal("0.71875"), new BigDecimal("9.00000"), new BigDecimal("9.28125"), new BigDecimal("9.56250"), new BigDecimal("9.84375"), new BigDecimal("10.12500"), new BigDecimal("10.40625"), new BigDecimal("10.68750"), new BigDecimal("10.96875"), new BigDecimal("11.25000"), new BigDecimal("11.53125"), new BigDecimal("11.81250"), new BigDecimal("12.09375"), new BigDecimal("12.37500"), new BigDecimal("12.65625"), new BigDecimal("12.93750"), new BigDecimal("13.21875"), new BigDecimal("13.50000"), new BigDecimal("13.78125"), new BigDecimal("14.06250"), new BigDecimal("14.34375"), new BigDecimal("14.62500"), new BigDecimal("14.90625"), new BigDecimal("15.18750"), new BigDecimal("15.46875"), new BigDecimal("23.75000"), new BigDecimal("16.03125"), new BigDecimal("16.31250"), new BigDecimal("16.59375"), new BigDecimal("16.87500"), new BigDecimal("17.15625"), new BigDecimal("17.43750"), new BigDecimal("17.71875")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.31250"), new BigDecimal("0.62500"), new BigDecimal("0.93750"), new BigDecimal("1.25000"), new BigDecimal("1.56250"), new BigDecimal("1.87500"), new BigDecimal("2.18750"), new BigDecimal("2.50000"), new BigDecimal("2.81250"), new BigDecimal("3.12500"), new BigDecimal("3.43750"), new BigDecimal("3.75000"), new BigDecimal("4.06250"), new BigDecimal("4.37500"), new BigDecimal("4.68750"), new BigDecimal("5.00000"), new BigDecimal("5.31250"), new BigDecimal("5.62500"), new BigDecimal("5.93750"), new BigDecimal("6.25000"), new BigDecimal("6.56250"), new BigDecimal("6.87500"), new BigDecimal("7.18750"), new BigDecimal("7.50000"), new BigDecimal("15.81250"), new BigDecimal("8.12500"), new BigDecimal("8.43750"), new BigDecimal("8.75000"), new BigDecimal("9.06250"), new BigDecimal("9.37500"), new BigDecimal("1.68750"), new BigDecimal("10.00000"), new BigDecimal("10.31250"), new BigDecimal("10.62500"), new BigDecimal("10.93750"), new BigDecimal("11.25000"), new BigDecimal("11.56250"), new BigDecimal("11.87500"), new BigDecimal("4.18750"), new BigDecimal("12.50000"), new BigDecimal("12.81250"), new BigDecimal("13.12500"), new BigDecimal("13.43750"), new BigDecimal("13.75000"), new BigDecimal("14.06250"), new BigDecimal("14.37500"), new BigDecimal("6.68750"), new BigDecimal("15.00000"), new BigDecimal("15.31250"), new BigDecimal("15.62500"), new BigDecimal("23.93750"), new BigDecimal("16.25000"), new BigDecimal("16.56250"), new BigDecimal("16.87500"), new BigDecimal("1.18750"), new BigDecimal("17.50000"), new BigDecimal("17.81250"), new BigDecimal("18.12500"), new BigDecimal("18.43750"), new BigDecimal("18.75000"), new BigDecimal("19.06250"), new BigDecimal("19.37500"), new BigDecimal("3.68750")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.34375"), new BigDecimal("0.68750"), new BigDecimal("1.03125"), new BigDecimal("1.37500"), new BigDecimal("1.71875"), new BigDecimal("2.06250"), new BigDecimal("2.40625"), new BigDecimal("2.75000"), new BigDecimal("3.09375"), new BigDecimal("3.43750"), new BigDecimal("3.78125"), new BigDecimal("4.12500"), new BigDecimal("4.46875"), new BigDecimal("4.81250"), new BigDecimal("5.15625"), new BigDecimal("5.50000"), new BigDecimal("5.84375"), new BigDecimal("6.18750"), new BigDecimal("6.53125"), new BigDecimal("6.87500"), new BigDecimal("7.21875"), new BigDecimal("7.56250"), new BigDecimal("7.90625"), new BigDecimal("8.25000"), new BigDecimal("8.59375"), new BigDecimal("8.93750"), new BigDecimal("9.28125"), new BigDecimal("9.62500"), new BigDecimal("9.96875"), new BigDecimal("10.31250"), new BigDecimal("10.65625"), new BigDecimal("11.00000"), new BigDecimal("11.34375"), new BigDecimal("11.68750"), new BigDecimal("12.03125"), new BigDecimal("12.37500"), new BigDecimal("12.71875"), new BigDecimal("13.06250"), new BigDecimal("13.40625"), new BigDecimal("13.75000"), new BigDecimal("14.09375"), new BigDecimal("14.43750"), new BigDecimal("14.78125"), new BigDecimal("15.12500"), new BigDecimal("15.46875"), new BigDecimal("23.81250"), new BigDecimal("8.15625"), new BigDecimal("16.50000"), new BigDecimal("16.84375"), new BigDecimal("17.18750"), new BigDecimal("17.53125"), new BigDecimal("17.87500"), new BigDecimal("18.21875"), new BigDecimal("18.56250"), new BigDecimal("18.90625"), new BigDecimal("19.25000"), new BigDecimal("19.59375"), new BigDecimal("19.93750"), new BigDecimal("20.28125"), new BigDecimal("20.62500"), new BigDecimal("20.96875"), new BigDecimal("21.31250"), new BigDecimal("21.65625")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.37500"), new BigDecimal("0.75000"), new BigDecimal("1.12500"), new BigDecimal("1.50000"), new BigDecimal("1.87500"), new BigDecimal("2.25000"), new BigDecimal("2.62500"), new BigDecimal("3.00000"), new BigDecimal("3.37500"), new BigDecimal("3.75000"), new BigDecimal("4.12500"), new BigDecimal("4.50000"), new BigDecimal("4.87500"), new BigDecimal("5.25000"), new BigDecimal("5.62500"), new BigDecimal("6.00000"), new BigDecimal("6.37500"), new BigDecimal("6.75000"), new BigDecimal("7.12500"), new BigDecimal("7.50000"), new BigDecimal("15.87500"), new BigDecimal("8.25000"), new BigDecimal("0.62500"), new BigDecimal("9.00000"), new BigDecimal("9.37500"), new BigDecimal("9.75000"), new BigDecimal("10.12500"), new BigDecimal("10.50000"), new BigDecimal("10.87500"), new BigDecimal("11.25000"), new BigDecimal("11.62500"), new BigDecimal("12.00000"), new BigDecimal("12.37500"), new BigDecimal("12.75000"), new BigDecimal("13.12500"), new BigDecimal("13.50000"), new BigDecimal("13.87500"), new BigDecimal("14.25000"), new BigDecimal("14.62500"), new BigDecimal("15.00000"), new BigDecimal("15.37500"), new BigDecimal("23.75000"), new BigDecimal("16.12500"), new BigDecimal("16.50000"), new BigDecimal("16.87500"), new BigDecimal("17.25000"), new BigDecimal("17.62500"), new BigDecimal("18.00000"), new BigDecimal("18.37500"), new BigDecimal("18.75000"), new BigDecimal("19.12500"), new BigDecimal("19.50000"), new BigDecimal("19.87500"), new BigDecimal("20.25000"), new BigDecimal("20.62500"), new BigDecimal("21.00000"), new BigDecimal("21.37500"), new BigDecimal("21.75000"), new BigDecimal("22.12500"), new BigDecimal("22.50000"), new BigDecimal("22.87500"), new BigDecimal("23.25000"), new BigDecimal("23.62500")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.40625"), new BigDecimal("0.81250"), new BigDecimal("1.21875"), new BigDecimal("1.62500"), new BigDecimal("2.03125"), new BigDecimal("2.43750"), new BigDecimal("2.84375"), new BigDecimal("3.25000"), new BigDecimal("3.65625"), new BigDecimal("4.06250"), new BigDecimal("4.46875"), new BigDecimal("4.87500"), new BigDecimal("5.28125"), new BigDecimal("5.68750"), new BigDecimal("6.09375"), new BigDecimal("6.50000"), new BigDecimal("6.90625"), new BigDecimal("7.31250"), new BigDecimal("15.71875"), new BigDecimal("8.12500"), new BigDecimal("8.53125"), new BigDecimal("8.93750"), new BigDecimal("1.34375"), new BigDecimal("9.75000"), new BigDecimal("10.15625"), new BigDecimal("10.56250"), new BigDecimal("10.96875"), new BigDecimal("11.37500"), new BigDecimal("11.78125"), new BigDecimal("12.18750"), new BigDecimal("12.59375"), new BigDecimal("13.00000"), new BigDecimal("13.40625"), new BigDecimal("13.81250"), new BigDecimal("14.21875"), new BigDecimal("14.62500"), new BigDecimal("15.03125"), new BigDecimal("15.43750"), new BigDecimal("15.84375"), new BigDecimal("16.25000"), new BigDecimal("16.65625"), new BigDecimal("17.06250"), new BigDecimal("17.46875"), new BigDecimal("17.87500"), new BigDecimal("18.28125"), new BigDecimal("18.68750"), new BigDecimal("19.09375"), new BigDecimal("19.50000"), new BigDecimal("19.90625"), new BigDecimal("20.31250"), new BigDecimal("20.71875"), new BigDecimal("21.12500"), new BigDecimal("21.53125"), new BigDecimal("21.93750"), new BigDecimal("22.34375"), new BigDecimal("22.75000"), new BigDecimal("23.15625"), new BigDecimal("23.56250"), new BigDecimal("31.96875"), new BigDecimal("24.37500"), new BigDecimal("24.78125"), new BigDecimal("25.18750"), new BigDecimal("25.59375")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.43750"), new BigDecimal("0.87500"), new BigDecimal("1.31250"), new BigDecimal("1.75000"), new BigDecimal("2.18750"), new BigDecimal("2.62500"), new BigDecimal("3.06250"), new BigDecimal("3.50000"), new BigDecimal("3.93750"), new BigDecimal("4.37500"), new BigDecimal("4.81250"), new BigDecimal("5.25000"), new BigDecimal("5.68750"), new BigDecimal("6.12500"), new BigDecimal("6.56250"), new BigDecimal("7.00000"), new BigDecimal("7.43750"), new BigDecimal("15.87500"), new BigDecimal("8.31250"), new BigDecimal("8.75000"), new BigDecimal("9.18750"), new BigDecimal("9.62500"), new BigDecimal("2.06250"), new BigDecimal("10.50000"), new BigDecimal("10.93750"), new BigDecimal("11.37500"), new BigDecimal("11.81250"), new BigDecimal("12.25000"), new BigDecimal("12.68750"), new BigDecimal("13.12500"), new BigDecimal("5.56250"), new BigDecimal("14.00000"), new BigDecimal("14.43750"), new BigDecimal("14.87500"), new BigDecimal("15.31250"), new BigDecimal("23.75000"), new BigDecimal("16.18750"), new BigDecimal("16.62500"), new BigDecimal("1.06250"), new BigDecimal("17.50000"), new BigDecimal("17.93750"), new BigDecimal("18.37500"), new BigDecimal("18.81250"), new BigDecimal("19.25000"), new BigDecimal("19.68750"), new BigDecimal("20.12500"), new BigDecimal("4.56250"), new BigDecimal("21.00000"), new BigDecimal("21.43750"), new BigDecimal("21.87500"), new BigDecimal("22.31250"), new BigDecimal("22.75000"), new BigDecimal("23.18750"), new BigDecimal("31.62500"), new BigDecimal("0.06250"), new BigDecimal("24.50000"), new BigDecimal("24.93750"), new BigDecimal("25.37500"), new BigDecimal("25.81250"), new BigDecimal("26.25000"), new BigDecimal("26.68750"), new BigDecimal("27.12500"), new BigDecimal("3.56250")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.46875"), new BigDecimal("0.93750"), new BigDecimal("1.40625"), new BigDecimal("1.87500"), new BigDecimal("2.34375"), new BigDecimal("2.81250"), new BigDecimal("3.28125"), new BigDecimal("3.75000"), new BigDecimal("4.21875"), new BigDecimal("4.68750"), new BigDecimal("5.15625"), new BigDecimal("5.62500"), new BigDecimal("6.09375"), new BigDecimal("6.56250"), new BigDecimal("7.03125"), new BigDecimal("7.50000"), new BigDecimal("15.96875"), new BigDecimal("8.43750"), new BigDecimal("8.90625"), new BigDecimal("9.37500"), new BigDecimal("9.84375"), new BigDecimal("10.31250"), new BigDecimal("10.78125"), new BigDecimal("11.25000"), new BigDecimal("11.71875"), new BigDecimal("12.18750"), new BigDecimal("12.65625"), new BigDecimal("13.12500"), new BigDecimal("13.59375"), new BigDecimal("14.06250"), new BigDecimal("14.53125"), new BigDecimal("15.00000"), new BigDecimal("15.46875"), new BigDecimal("23.93750"), new BigDecimal("16.40625"), new BigDecimal("16.87500"), new BigDecimal("17.34375"), new BigDecimal("17.81250"), new BigDecimal("18.28125"), new BigDecimal("18.75000"), new BigDecimal("19.21875"), new BigDecimal("19.68750"), new BigDecimal("20.15625"), new BigDecimal("20.62500"), new BigDecimal("21.09375"), new BigDecimal("21.56250"), new BigDecimal("22.03125"), new BigDecimal("22.50000"), new BigDecimal("22.96875"), new BigDecimal("23.43750"), new BigDecimal("31.90625"), new BigDecimal("24.37500"), new BigDecimal("24.84375"), new BigDecimal("25.31250"), new BigDecimal("25.78125"), new BigDecimal("26.25000"), new BigDecimal("26.71875"), new BigDecimal("27.18750"), new BigDecimal("27.65625"), new BigDecimal("28.12500"), new BigDecimal("28.59375"), new BigDecimal("29.06250"), new BigDecimal("29.53125")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.50000"), new BigDecimal("1.00000"), new BigDecimal("1.50000"), new BigDecimal("2.00000"), new BigDecimal("2.50000"), new BigDecimal("3.00000"), new BigDecimal("3.50000"), new BigDecimal("4.00000"), new BigDecimal("4.50000"), new BigDecimal("5.00000"), new BigDecimal("5.50000"), new BigDecimal("6.00000"), new BigDecimal("6.50000"), new BigDecimal("7.00000"), new BigDecimal("7.50000"), new BigDecimal("8.00000"), new BigDecimal("8.50000"), new BigDecimal("9.00000"), new BigDecimal("9.50000"), new BigDecimal("10.00000"), new BigDecimal("10.50000"), new BigDecimal("11.00000"), new BigDecimal("11.50000"), new BigDecimal("12.00000"), new BigDecimal("12.50000"), new BigDecimal("13.00000"), new BigDecimal("13.50000"), new BigDecimal("14.00000"), new BigDecimal("14.50000"), new BigDecimal("15.00000"), new BigDecimal("15.50000"), new BigDecimal("16.00000"), new BigDecimal("16.50000"), new BigDecimal("17.00000"), new BigDecimal("17.50000"), new BigDecimal("18.00000"), new BigDecimal("18.50000"), new BigDecimal("19.00000"), new BigDecimal("19.50000"), new BigDecimal("20.00000"), new BigDecimal("20.50000"), new BigDecimal("21.00000"), new BigDecimal("21.50000"), new BigDecimal("22.00000"), new BigDecimal("22.50000"), new BigDecimal("23.00000"), new BigDecimal("23.50000"), new BigDecimal("24.00000"), new BigDecimal("24.50000"), new BigDecimal("25.00000"), new BigDecimal("25.50000"), new BigDecimal("26.00000"), new BigDecimal("26.50000"), new BigDecimal("27.00000"), new BigDecimal("27.50000"), new BigDecimal("28.00000"), new BigDecimal("28.50000"), new BigDecimal("29.00000"), new BigDecimal("29.50000"), new BigDecimal("30.00000"), new BigDecimal("30.50000"), new BigDecimal("31.00000"), new BigDecimal("31.50000")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.53125"), new BigDecimal("1.06250"), new BigDecimal("1.59375"), new BigDecimal("2.12500"), new BigDecimal("2.65625"), new BigDecimal("3.18750"), new BigDecimal("3.71875"), new BigDecimal("4.25000"), new BigDecimal("4.78125"), new BigDecimal("5.31250"), new BigDecimal("5.84375"), new BigDecimal("6.37500"), new BigDecimal("6.90625"), new BigDecimal("7.43750"), new BigDecimal("7.96875"), new BigDecimal("8.50000"), new BigDecimal("9.03125"), new BigDecimal("9.56250"), new BigDecimal("10.09375"), new BigDecimal("10.62500"), new BigDecimal("11.15625"), new BigDecimal("11.68750"), new BigDecimal("12.21875"), new BigDecimal("12.75000"), new BigDecimal("13.28125"), new BigDecimal("13.81250"), new BigDecimal("14.34375"), new BigDecimal("14.87500"), new BigDecimal("15.40625"), new BigDecimal("23.93750"), new BigDecimal("8.46875"), new BigDecimal("17.00000"), new BigDecimal("17.53125"), new BigDecimal("18.06250"), new BigDecimal("18.59375"), new BigDecimal("19.12500"), new BigDecimal("19.65625"), new BigDecimal("20.18750"), new BigDecimal("20.71875"), new BigDecimal("21.25000"), new BigDecimal("21.78125"), new BigDecimal("22.31250"), new BigDecimal("22.84375"), new BigDecimal("23.37500"), new BigDecimal("31.90625"), new BigDecimal("24.43750"), new BigDecimal("16.96875"), new BigDecimal("25.50000"), new BigDecimal("26.03125"), new BigDecimal("26.56250"), new BigDecimal("27.09375"), new BigDecimal("27.62500"), new BigDecimal("28.15625"), new BigDecimal("28.68750"), new BigDecimal("29.21875"), new BigDecimal("29.75000"), new BigDecimal("30.28125"), new BigDecimal("30.81250"), new BigDecimal("31.34375"), new BigDecimal("39.87500"), new BigDecimal("32.40625"), new BigDecimal("32.93750"), new BigDecimal("25.46875")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.56250"), new BigDecimal("1.12500"), new BigDecimal("1.68750"), new BigDecimal("2.25000"), new BigDecimal("2.81250"), new BigDecimal("3.37500"), new BigDecimal("3.93750"), new BigDecimal("4.50000"), new BigDecimal("5.06250"), new BigDecimal("5.62500"), new BigDecimal("6.18750"), new BigDecimal("6.75000"), new BigDecimal("7.31250"), new BigDecimal("15.87500"), new BigDecimal("0.43750"), new BigDecimal("9.00000"), new BigDecimal("9.56250"), new BigDecimal("10.12500"), new BigDecimal("10.68750"), new BigDecimal("11.25000"), new BigDecimal("11.81250"), new BigDecimal("12.37500"), new BigDecimal("4.93750"), new BigDecimal("13.50000"), new BigDecimal("14.06250"), new BigDecimal("14.62500"), new BigDecimal("15.18750"), new BigDecimal("23.75000"), new BigDecimal("16.31250"), new BigDecimal("16.87500"), new BigDecimal("1.43750"), new BigDecimal("18.00000"), new BigDecimal("18.56250"), new BigDecimal("19.12500"), new BigDecimal("19.68750"), new BigDecimal("20.25000"), new BigDecimal("20.81250"), new BigDecimal("21.37500"), new BigDecimal("5.93750"), new BigDecimal("22.50000"), new BigDecimal("23.06250"), new BigDecimal("31.62500"), new BigDecimal("24.18750"), new BigDecimal("24.75000"), new BigDecimal("25.31250"), new BigDecimal("25.87500"), new BigDecimal("2.43750"), new BigDecimal("27.00000"), new BigDecimal("27.56250"), new BigDecimal("28.12500"), new BigDecimal("28.68750"), new BigDecimal("29.25000"), new BigDecimal("29.81250"), new BigDecimal("30.37500"), new BigDecimal("6.93750"), new BigDecimal("39.50000"), new BigDecimal("32.06250"), new BigDecimal("32.62500"), new BigDecimal("33.18750"), new BigDecimal("33.75000"), new BigDecimal("34.31250"), new BigDecimal("34.87500"), new BigDecimal("3.43750")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.59375"), new BigDecimal("1.18750"), new BigDecimal("1.78125"), new BigDecimal("2.37500"), new BigDecimal("2.96875"), new BigDecimal("3.56250"), new BigDecimal("4.15625"), new BigDecimal("4.75000"), new BigDecimal("5.34375"), new BigDecimal("5.93750"), new BigDecimal("6.53125"), new BigDecimal("7.12500"), new BigDecimal("15.71875"), new BigDecimal("8.31250"), new BigDecimal("0.90625"), new BigDecimal("9.50000"), new BigDecimal("10.09375"), new BigDecimal("10.68750"), new BigDecimal("11.28125"), new BigDecimal("11.87500"), new BigDecimal("12.46875"), new BigDecimal("13.06250"), new BigDecimal("13.65625"), new BigDecimal("14.25000"), new BigDecimal("14.84375"), new BigDecimal("23.43750"), new BigDecimal("16.03125"), new BigDecimal("16.62500"), new BigDecimal("17.21875"), new BigDecimal("17.81250"), new BigDecimal("10.40625"), new BigDecimal("19.00000"), new BigDecimal("19.59375"), new BigDecimal("20.18750"), new BigDecimal("20.78125"), new BigDecimal("21.37500"), new BigDecimal("21.96875"), new BigDecimal("22.56250"), new BigDecimal("23.15625"), new BigDecimal("31.75000"), new BigDecimal("24.34375"), new BigDecimal("24.93750"), new BigDecimal("25.53125"), new BigDecimal("26.12500"), new BigDecimal("26.71875"), new BigDecimal("27.31250"), new BigDecimal("27.90625"), new BigDecimal("28.50000"), new BigDecimal("29.09375"), new BigDecimal("29.68750"), new BigDecimal("30.28125"), new BigDecimal("30.87500"), new BigDecimal("39.46875"), new BigDecimal("32.06250"), new BigDecimal("24.65625"), new BigDecimal("33.25000"), new BigDecimal("33.84375"), new BigDecimal("34.43750"), new BigDecimal("35.03125"), new BigDecimal("35.62500"), new BigDecimal("36.21875"), new BigDecimal("36.81250"), new BigDecimal("37.40625")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.62500"), new BigDecimal("1.25000"), new BigDecimal("1.87500"), new BigDecimal("2.50000"), new BigDecimal("3.12500"), new BigDecimal("3.75000"), new BigDecimal("4.37500"), new BigDecimal("5.00000"), new BigDecimal("5.62500"), new BigDecimal("6.25000"), new BigDecimal("6.87500"), new BigDecimal("15.50000"), new BigDecimal("8.12500"), new BigDecimal("8.75000"), new BigDecimal("1.37500"), new BigDecimal("10.00000"), new BigDecimal("10.62500"), new BigDecimal("11.25000"), new BigDecimal("11.87500"), new BigDecimal("12.50000"), new BigDecimal("13.12500"), new BigDecimal("13.75000"), new BigDecimal("14.37500"), new BigDecimal("15.00000"), new BigDecimal("23.62500"), new BigDecimal("16.25000"), new BigDecimal("16.87500"), new BigDecimal("17.50000"), new BigDecimal("18.12500"), new BigDecimal("18.75000"), new BigDecimal("11.37500"), new BigDecimal("20.00000"), new BigDecimal("20.62500"), new BigDecimal("21.25000"), new BigDecimal("21.87500"), new BigDecimal("22.50000"), new BigDecimal("23.12500"), new BigDecimal("31.75000"), new BigDecimal("16.37500"), new BigDecimal("25.00000"), new BigDecimal("25.62500"), new BigDecimal("26.25000"), new BigDecimal("26.87500"), new BigDecimal("27.50000"), new BigDecimal("28.12500"), new BigDecimal("28.75000"), new BigDecimal("29.37500"), new BigDecimal("30.00000"), new BigDecimal("30.62500"), new BigDecimal("31.25000"), new BigDecimal("39.87500"), new BigDecimal("32.50000"), new BigDecimal("33.12500"), new BigDecimal("33.75000"), new BigDecimal("26.37500"), new BigDecimal("35.00000"), new BigDecimal("35.62500"), new BigDecimal("36.25000"), new BigDecimal("36.87500"), new BigDecimal("37.50000"), new BigDecimal("38.12500"), new BigDecimal("38.75000"), new BigDecimal("39.37500")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.65625"), new BigDecimal("1.31250"), new BigDecimal("1.96875"), new BigDecimal("2.62500"), new BigDecimal("3.28125"), new BigDecimal("3.93750"), new BigDecimal("4.59375"), new BigDecimal("5.25000"), new BigDecimal("5.90625"), new BigDecimal("6.56250"), new BigDecimal("7.21875"), new BigDecimal("15.87500"), new BigDecimal("8.53125"), new BigDecimal("9.18750"), new BigDecimal("1.84375"), new BigDecimal("10.50000"), new BigDecimal("11.15625"), new BigDecimal("11.81250"), new BigDecimal("12.46875"), new BigDecimal("13.12500"), new BigDecimal("13.78125"), new BigDecimal("14.43750"), new BigDecimal("15.09375"), new BigDecimal("23.75000"), new BigDecimal("16.40625"), new BigDecimal("17.06250"), new BigDecimal("17.71875"), new BigDecimal("18.37500"), new BigDecimal("19.03125"), new BigDecimal("19.68750"), new BigDecimal("20.34375"), new BigDecimal("21.00000"), new BigDecimal("21.65625"), new BigDecimal("22.31250"), new BigDecimal("22.96875"), new BigDecimal("31.62500"), new BigDecimal("24.28125"), new BigDecimal("24.93750"), new BigDecimal("17.59375"), new BigDecimal("26.25000"), new BigDecimal("26.90625"), new BigDecimal("27.56250"), new BigDecimal("28.21875"), new BigDecimal("28.87500"), new BigDecimal("29.53125"), new BigDecimal("30.18750"), new BigDecimal("30.84375"), new BigDecimal("39.50000"), new BigDecimal("32.15625"), new BigDecimal("32.81250"), new BigDecimal("33.46875"), new BigDecimal("34.12500"), new BigDecimal("34.78125"), new BigDecimal("35.43750"), new BigDecimal("36.09375"), new BigDecimal("36.75000"), new BigDecimal("37.40625"), new BigDecimal("38.06250"), new BigDecimal("38.71875"), new BigDecimal("47.37500"), new BigDecimal("40.03125"), new BigDecimal("40.68750"), new BigDecimal("33.34375")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.68750"), new BigDecimal("1.37500"), new BigDecimal("2.06250"), new BigDecimal("2.75000"), new BigDecimal("3.43750"), new BigDecimal("4.12500"), new BigDecimal("4.81250"), new BigDecimal("5.50000"), new BigDecimal("6.18750"), new BigDecimal("6.87500"), new BigDecimal("15.56250"), new BigDecimal("8.25000"), new BigDecimal("8.93750"), new BigDecimal("9.62500"), new BigDecimal("2.31250"), new BigDecimal("11.00000"), new BigDecimal("11.68750"), new BigDecimal("12.37500"), new BigDecimal("13.06250"), new BigDecimal("13.75000"), new BigDecimal("14.43750"), new BigDecimal("15.12500"), new BigDecimal("7.81250"), new BigDecimal("16.50000"), new BigDecimal("17.18750"), new BigDecimal("17.87500"), new BigDecimal("18.56250"), new BigDecimal("19.25000"), new BigDecimal("19.93750"), new BigDecimal("20.62500"), new BigDecimal("5.31250"), new BigDecimal("22.00000"), new BigDecimal("22.68750"), new BigDecimal("31.37500"), new BigDecimal("24.06250"), new BigDecimal("24.75000"), new BigDecimal("25.43750"), new BigDecimal("26.12500"), new BigDecimal("2.81250"), new BigDecimal("27.50000"), new BigDecimal("28.18750"), new BigDecimal("28.87500"), new BigDecimal("29.56250"), new BigDecimal("30.25000"), new BigDecimal("30.93750"), new BigDecimal("39.62500"), new BigDecimal("0.31250"), new BigDecimal("33.00000"), new BigDecimal("33.68750"), new BigDecimal("34.37500"), new BigDecimal("35.06250"), new BigDecimal("35.75000"), new BigDecimal("36.43750"), new BigDecimal("37.12500"), new BigDecimal("5.81250"), new BigDecimal("38.50000"), new BigDecimal("39.18750"), new BigDecimal("47.87500"), new BigDecimal("40.56250"), new BigDecimal("41.25000"), new BigDecimal("41.93750"), new BigDecimal("42.62500"), new BigDecimal("3.31250")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.71875"), new BigDecimal("1.43750"), new BigDecimal("2.15625"), new BigDecimal("2.87500"), new BigDecimal("3.59375"), new BigDecimal("4.31250"), new BigDecimal("5.03125"), new BigDecimal("5.75000"), new BigDecimal("6.46875"), new BigDecimal("7.18750"), new BigDecimal("15.90625"), new BigDecimal("8.62500"), new BigDecimal("9.34375"), new BigDecimal("10.06250"), new BigDecimal("2.78125"), new BigDecimal("11.50000"), new BigDecimal("12.21875"), new BigDecimal("12.93750"), new BigDecimal("13.65625"), new BigDecimal("14.37500"), new BigDecimal("15.09375"), new BigDecimal("23.81250"), new BigDecimal("8.53125"), new BigDecimal("17.25000"), new BigDecimal("17.96875"), new BigDecimal("18.68750"), new BigDecimal("19.40625"), new BigDecimal("20.12500"), new BigDecimal("20.84375"), new BigDecimal("21.56250"), new BigDecimal("22.28125"), new BigDecimal("23.00000"), new BigDecimal("31.71875"), new BigDecimal("24.43750"), new BigDecimal("25.15625"), new BigDecimal("25.87500"), new BigDecimal("26.59375"), new BigDecimal("27.31250"), new BigDecimal("28.03125"), new BigDecimal("28.75000"), new BigDecimal("29.46875"), new BigDecimal("30.18750"), new BigDecimal("30.90625"), new BigDecimal("39.62500"), new BigDecimal("32.34375"), new BigDecimal("33.06250"), new BigDecimal("25.78125"), new BigDecimal("34.50000"), new BigDecimal("35.21875"), new BigDecimal("35.93750"), new BigDecimal("36.65625"), new BigDecimal("37.37500"), new BigDecimal("38.09375"), new BigDecimal("38.81250"), new BigDecimal("39.53125"), new BigDecimal("40.25000"), new BigDecimal("40.96875"), new BigDecimal("41.68750"), new BigDecimal("42.40625"), new BigDecimal("43.12500"), new BigDecimal("43.84375"), new BigDecimal("44.56250"), new BigDecimal("45.28125")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.75000"), new BigDecimal("1.50000"), new BigDecimal("2.25000"), new BigDecimal("3.00000"), new BigDecimal("3.75000"), new BigDecimal("4.50000"), new BigDecimal("5.25000"), new BigDecimal("6.00000"), new BigDecimal("6.75000"), new BigDecimal("15.50000"), new BigDecimal("8.25000"), new BigDecimal("9.00000"), new BigDecimal("9.75000"), new BigDecimal("10.50000"), new BigDecimal("3.25000"), new BigDecimal("12.00000"), new BigDecimal("12.75000"), new BigDecimal("13.50000"), new BigDecimal("14.25000"), new BigDecimal("15.00000"), new BigDecimal("23.75000"), new BigDecimal("16.50000"), new BigDecimal("9.25000"), new BigDecimal("18.00000"), new BigDecimal("18.75000"), new BigDecimal("19.50000"), new BigDecimal("20.25000"), new BigDecimal("21.00000"), new BigDecimal("21.75000"), new BigDecimal("22.50000"), new BigDecimal("23.25000"), new BigDecimal("24.00000"), new BigDecimal("24.75000"), new BigDecimal("25.50000"), new BigDecimal("26.25000"), new BigDecimal("27.00000"), new BigDecimal("27.75000"), new BigDecimal("28.50000"), new BigDecimal("29.25000"), new BigDecimal("30.00000"), new BigDecimal("30.75000"), new BigDecimal("39.50000"), new BigDecimal("32.25000"), new BigDecimal("33.00000"), new BigDecimal("33.75000"), new BigDecimal("34.50000"), new BigDecimal("27.25000"), new BigDecimal("36.00000"), new BigDecimal("36.75000"), new BigDecimal("37.50000"), new BigDecimal("38.25000"), new BigDecimal("39.00000"), new BigDecimal("47.75000"), new BigDecimal("40.50000"), new BigDecimal("33.25000"), new BigDecimal("42.00000"), new BigDecimal("42.75000"), new BigDecimal("43.50000"), new BigDecimal("44.25000"), new BigDecimal("45.00000"), new BigDecimal("45.75000"), new BigDecimal("46.50000"), new BigDecimal("47.25000")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.78125"), new BigDecimal("1.56250"), new BigDecimal("2.34375"), new BigDecimal("3.12500"), new BigDecimal("3.90625"), new BigDecimal("4.68750"), new BigDecimal("5.46875"), new BigDecimal("6.25000"), new BigDecimal("7.03125"), new BigDecimal("15.81250"), new BigDecimal("8.59375"), new BigDecimal("9.37500"), new BigDecimal("10.15625"), new BigDecimal("10.93750"), new BigDecimal("3.71875"), new BigDecimal("12.50000"), new BigDecimal("13.28125"), new BigDecimal("14.06250"), new BigDecimal("14.84375"), new BigDecimal("23.62500"), new BigDecimal("16.40625"), new BigDecimal("17.18750"), new BigDecimal("9.96875"), new BigDecimal("18.75000"), new BigDecimal("19.53125"), new BigDecimal("20.31250"), new BigDecimal("21.09375"), new BigDecimal("21.87500"), new BigDecimal("22.65625"), new BigDecimal("31.43750"), new BigDecimal("16.21875"), new BigDecimal("25.00000"), new BigDecimal("25.78125"), new BigDecimal("26.56250"), new BigDecimal("27.34375"), new BigDecimal("28.12500"), new BigDecimal("28.90625"), new BigDecimal("29.68750"), new BigDecimal("30.46875"), new BigDecimal("39.25000"), new BigDecimal("32.03125"), new BigDecimal("32.81250"), new BigDecimal("33.59375"), new BigDecimal("34.37500"), new BigDecimal("35.15625"), new BigDecimal("35.93750"), new BigDecimal("36.71875"), new BigDecimal("37.50000"), new BigDecimal("38.28125"), new BigDecimal("39.06250"), new BigDecimal("47.84375"), new BigDecimal("40.62500"), new BigDecimal("41.40625"), new BigDecimal("42.18750"), new BigDecimal("34.96875"), new BigDecimal("43.75000"), new BigDecimal("44.53125"), new BigDecimal("45.31250"), new BigDecimal("46.09375"), new BigDecimal("46.87500"), new BigDecimal("55.65625"), new BigDecimal("48.43750"), new BigDecimal("41.21875")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.81250"), new BigDecimal("1.62500"), new BigDecimal("2.43750"), new BigDecimal("3.25000"), new BigDecimal("4.06250"), new BigDecimal("4.87500"), new BigDecimal("5.68750"), new BigDecimal("6.50000"), new BigDecimal("15.31250"), new BigDecimal("8.12500"), new BigDecimal("8.93750"), new BigDecimal("9.75000"), new BigDecimal("10.56250"), new BigDecimal("11.37500"), new BigDecimal("4.18750"), new BigDecimal("13.00000"), new BigDecimal("13.81250"), new BigDecimal("14.62500"), new BigDecimal("23.43750"), new BigDecimal("16.25000"), new BigDecimal("17.06250"), new BigDecimal("17.87500"), new BigDecimal("2.68750"), new BigDecimal("19.50000"), new BigDecimal("20.31250"), new BigDecimal("21.12500"), new BigDecimal("21.93750"), new BigDecimal("22.75000"), new BigDecimal("31.56250"), new BigDecimal("24.37500"), new BigDecimal("1.18750"), new BigDecimal("26.00000"), new BigDecimal("26.81250"), new BigDecimal("27.62500"), new BigDecimal("28.43750"), new BigDecimal("29.25000"), new BigDecimal("30.06250"), new BigDecimal("30.87500"), new BigDecimal("7.68750"), new BigDecimal("32.50000"), new BigDecimal("33.31250"), new BigDecimal("34.12500"), new BigDecimal("34.93750"), new BigDecimal("35.75000"), new BigDecimal("36.56250"), new BigDecimal("37.37500"), new BigDecimal("6.18750"), new BigDecimal("39.00000"), new BigDecimal("47.81250"), new BigDecimal("40.62500"), new BigDecimal("41.43750"), new BigDecimal("42.25000"), new BigDecimal("43.06250"), new BigDecimal("43.87500"), new BigDecimal("4.68750"), new BigDecimal("45.50000"), new BigDecimal("46.31250"), new BigDecimal("47.12500"), new BigDecimal("55.93750"), new BigDecimal("48.75000"), new BigDecimal("49.56250"), new BigDecimal("50.37500"), new BigDecimal("3.18750")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.84375"), new BigDecimal("1.68750"), new BigDecimal("2.53125"), new BigDecimal("3.37500"), new BigDecimal("4.21875"), new BigDecimal("5.06250"), new BigDecimal("5.90625"), new BigDecimal("6.75000"), new BigDecimal("15.59375"), new BigDecimal("8.43750"), new BigDecimal("9.28125"), new BigDecimal("10.12500"), new BigDecimal("10.96875"), new BigDecimal("11.81250"), new BigDecimal("4.65625"), new BigDecimal("13.50000"), new BigDecimal("14.34375"), new BigDecimal("23.18750"), new BigDecimal("16.03125"), new BigDecimal("16.87500"), new BigDecimal("17.71875"), new BigDecimal("18.56250"), new BigDecimal("11.40625"), new BigDecimal("20.25000"), new BigDecimal("21.09375"), new BigDecimal("21.93750"), new BigDecimal("22.78125"), new BigDecimal("31.62500"), new BigDecimal("24.46875"), new BigDecimal("25.31250"), new BigDecimal("18.15625"), new BigDecimal("27.00000"), new BigDecimal("27.84375"), new BigDecimal("28.68750"), new BigDecimal("29.53125"), new BigDecimal("30.37500"), new BigDecimal("39.21875"), new BigDecimal("32.06250"), new BigDecimal("24.90625"), new BigDecimal("33.75000"), new BigDecimal("34.59375"), new BigDecimal("35.43750"), new BigDecimal("36.28125"), new BigDecimal("37.12500"), new BigDecimal("37.96875"), new BigDecimal("38.81250"), new BigDecimal("39.65625"), new BigDecimal("40.50000"), new BigDecimal("41.34375"), new BigDecimal("42.18750"), new BigDecimal("43.03125"), new BigDecimal("43.87500"), new BigDecimal("44.71875"), new BigDecimal("45.56250"), new BigDecimal("46.40625"), new BigDecimal("55.25000"), new BigDecimal("48.09375"), new BigDecimal("48.93750"), new BigDecimal("49.78125"), new BigDecimal("50.62500"), new BigDecimal("51.46875"), new BigDecimal("52.31250"), new BigDecimal("53.15625")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.87500"), new BigDecimal("1.75000"), new BigDecimal("2.62500"), new BigDecimal("3.50000"), new BigDecimal("4.37500"), new BigDecimal("5.25000"), new BigDecimal("6.12500"), new BigDecimal("7.00000"), new BigDecimal("15.87500"), new BigDecimal("8.75000"), new BigDecimal("9.62500"), new BigDecimal("10.50000"), new BigDecimal("11.37500"), new BigDecimal("12.25000"), new BigDecimal("5.12500"), new BigDecimal("14.00000"), new BigDecimal("14.87500"), new BigDecimal("23.75000"), new BigDecimal("16.62500"), new BigDecimal("17.50000"), new BigDecimal("18.37500"), new BigDecimal("19.25000"), new BigDecimal("12.12500"), new BigDecimal("21.00000"), new BigDecimal("21.87500"), new BigDecimal("22.75000"), new BigDecimal("31.62500"), new BigDecimal("24.50000"), new BigDecimal("25.37500"), new BigDecimal("26.25000"), new BigDecimal("19.12500"), new BigDecimal("28.00000"), new BigDecimal("28.87500"), new BigDecimal("29.75000"), new BigDecimal("30.62500"), new BigDecimal("39.50000"), new BigDecimal("32.37500"), new BigDecimal("33.25000"), new BigDecimal("26.12500"), new BigDecimal("35.00000"), new BigDecimal("35.87500"), new BigDecimal("36.75000"), new BigDecimal("37.62500"), new BigDecimal("38.50000"), new BigDecimal("47.37500"), new BigDecimal("40.25000"), new BigDecimal("33.12500"), new BigDecimal("42.00000"), new BigDecimal("42.87500"), new BigDecimal("43.75000"), new BigDecimal("44.62500"), new BigDecimal("45.50000"), new BigDecimal("46.37500"), new BigDecimal("55.25000"), new BigDecimal("40.12500"), new BigDecimal("49.00000"), new BigDecimal("49.87500"), new BigDecimal("50.75000"), new BigDecimal("51.62500"), new BigDecimal("52.50000"), new BigDecimal("53.37500"), new BigDecimal("54.25000"), new BigDecimal("55.12500")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.90625"), new BigDecimal("1.81250"), new BigDecimal("2.71875"), new BigDecimal("3.62500"), new BigDecimal("4.53125"), new BigDecimal("5.43750"), new BigDecimal("6.34375"), new BigDecimal("15.25000"), new BigDecimal("8.15625"), new BigDecimal("9.06250"), new BigDecimal("9.96875"), new BigDecimal("10.87500"), new BigDecimal("11.78125"), new BigDecimal("12.68750"), new BigDecimal("5.59375"), new BigDecimal("14.50000"), new BigDecimal("23.40625"), new BigDecimal("16.31250"), new BigDecimal("17.21875"), new BigDecimal("18.12500"), new BigDecimal("19.03125"), new BigDecimal("19.93750"), new BigDecimal("12.84375"), new BigDecimal("21.75000"), new BigDecimal("22.65625"), new BigDecimal("31.56250"), new BigDecimal("24.46875"), new BigDecimal("25.37500"), new BigDecimal("26.28125"), new BigDecimal("27.18750"), new BigDecimal("20.09375"), new BigDecimal("29.00000"), new BigDecimal("29.90625"), new BigDecimal("30.81250"), new BigDecimal("39.71875"), new BigDecimal("32.62500"), new BigDecimal("33.53125"), new BigDecimal("34.43750"), new BigDecimal("27.34375"), new BigDecimal("36.25000"), new BigDecimal("37.15625"), new BigDecimal("38.06250"), new BigDecimal("38.96875"), new BigDecimal("47.87500"), new BigDecimal("40.78125"), new BigDecimal("41.68750"), new BigDecimal("34.59375"), new BigDecimal("43.50000"), new BigDecimal("44.40625"), new BigDecimal("45.31250"), new BigDecimal("46.21875"), new BigDecimal("55.12500"), new BigDecimal("48.03125"), new BigDecimal("48.93750"), new BigDecimal("41.84375"), new BigDecimal("50.75000"), new BigDecimal("51.65625"), new BigDecimal("52.56250"), new BigDecimal("53.46875"), new BigDecimal("54.37500"), new BigDecimal("63.28125"), new BigDecimal("56.18750"), new BigDecimal("49.09375")},
                    {new BigDecimal("0.00000"), new BigDecimal("0.93750"), new BigDecimal("1.87500"), new BigDecimal("2.81250"), new BigDecimal("3.75000"), new BigDecimal("4.68750"), new BigDecimal("5.62500"), new BigDecimal("6.56250"), new BigDecimal("15.50000"), new BigDecimal("8.43750"), new BigDecimal("9.37500"), new BigDecimal("10.31250"), new BigDecimal("11.25000"), new BigDecimal("12.18750"), new BigDecimal("13.12500"), new BigDecimal("6.06250"), new BigDecimal("15.00000"), new BigDecimal("23.93750"), new BigDecimal("16.87500"), new BigDecimal("17.81250"), new BigDecimal("18.75000"), new BigDecimal("19.68750"), new BigDecimal("20.62500"), new BigDecimal("5.56250"), new BigDecimal("22.50000"), new BigDecimal("31.43750"), new BigDecimal("24.37500"), new BigDecimal("25.31250"), new BigDecimal("26.25000"), new BigDecimal("27.18750"), new BigDecimal("28.12500"), new BigDecimal("5.06250"), new BigDecimal("30.00000"), new BigDecimal("30.93750"), new BigDecimal("39.87500"), new BigDecimal("32.81250"), new BigDecimal("33.75000"), new BigDecimal("34.68750"), new BigDecimal("35.62500"), new BigDecimal("4.56250"), new BigDecimal("37.50000"), new BigDecimal("38.43750"), new BigDecimal("47.37500"), new BigDecimal("40.31250"), new BigDecimal("41.25000"), new BigDecimal("42.18750"), new BigDecimal("43.12500"), new BigDecimal("4.06250"), new BigDecimal("45.00000"), new BigDecimal("45.93750"), new BigDecimal("46.87500"), new BigDecimal("55.81250"), new BigDecimal("48.75000"), new BigDecimal("49.68750"), new BigDecimal("50.62500"), new BigDecimal("3.56250"), new BigDecimal("52.50000"), new BigDecimal("53.43750"), new BigDecimal("54.37500"), new BigDecimal("63.31250"), new BigDecimal("56.25000"), new BigDecimal("57.18750"), new BigDecimal("58.12500"), new BigDecimal("3.06250")},
            };
            BigDecimal[][] actual = toBigDecimalMatrix(data);
            assertEquals(expected.length, actual.length);
            for (int i = 0; i < expected.length; i++) {
                assertArrayEquals(expected[i], actual[i]);
            }
        }
    }

    @Test
    void testRdwr() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_rdwr.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = generateExpectedIntMatrix(4, 7);
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testShuffle() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_shuffle.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = generateExpectedIntMatrix(32, 64);
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testTransform() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_transform.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {1, 0, -1, -2, -3, -4, -5},
                    {1, 1, 1, 1, 1, 1, 1},
                    {1, 2, 3, 4, 5, 6, 7},
                    {1, 3, 5, 7, 9, 11, 13}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testUnlimadd() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_unlimadd.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {0, -1, -2, -3, -4, -5, -6, 7, 8, 9},
                    {0, 0, 0, 0, 0, 0, 0, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 2, 4, 6, 8, 10, 12, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testUnlimgzip() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_unlimgzip.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {0, -1, -2, -3, -4, -5, -6, 7, 8, 9},
                    {0, 0, 0, 0, 0, 0, 0, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 2, 4, 6, 8, 10, 12, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }

    @Test
    void testUnlimmod() throws Exception {
        try (SeekableByteChannel channel = ResourceLoader.loadResourceAsChannel("h5ex_d/h5ex_d_unlimmod.h5")) {
            HdfFileReader reader = new HdfFileReader(channel).readFile();
            HdfDataset dataSet = reader.getDataset("/DS1").orElseThrow();
            TypedDataSource<HdfData> dataSource = new TypedDataSource<>(channel, reader, dataSet, HdfData.class);
            HdfData[][] data = dataSource.readMatrix();
            int[][] expected = {
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
                    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
            };
            assertArrayEquals(expected, toIntMatrix(data));
        }
    }
}