package org.hdf5javalib.dataclass;

import org.hdf5javalib.datatype.OpaqueDatatype;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.ByteBuffer;

/**
 * Represents an HDF5 opaque data structure.
 * <p>
 * The {@code HdfOpaque} class encapsulates uninterpreted binary data in an HDF5 file,
 * associating raw byte data with an {@link OpaqueDatatype} that defines the data's
 * size and optional tag. It implements the {@link HdfData} interface to provide
 * methods for accessing the data and converting it to various Java types.
 * </p>
 *
 * @see HdfData
 * @see OpaqueDatatype
 */
public class HdfOpaque implements HdfData {
    /**
     * The raw byte array containing the opaque data.
     */
    private final byte[] bytes;
    /**
     * The OpaqueDatatype defining the data size and format.
     */
    private final OpaqueDatatype datatype;

    /**
     * Constructs an HdfOpaque from a byte array and a specified OpaqueDatatype.
     * <p>
     * This constructor initializes the HdfOpaque by storing a reference to the provided
     * byte array and associating it with the given datatype. The byte array length must
     * match the size specified by the datatype, or an exception is thrown. The byte array
     * is treated as opaque data, with no specific interpretation imposed beyond the
     * datatype's size and format requirements.
     * </p>
     *
     * @param bytes    the byte array containing the opaque data
     * @param datatype the OpaqueDatatype defining the data size and format
     * @throws IllegalArgumentException if the byte array length does not match the datatype's size
     * @throws NullPointerException     if either {@code bytes} or {@code datatype} is null
     */
    public HdfOpaque(byte[] bytes, OpaqueDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        if (bytes.length != datatype.getSize()) {
            throw new IllegalArgumentException(
                    String.format("Byte array length (%d) does not match datatype size (%d)",
                            bytes.length, datatype.getSize())
            );
        }
        this.bytes = bytes;
        this.datatype = datatype;
    }

    /**
     * Returns a copy of the byte array containing the opaque data.
     *
     * @return a cloned byte array to prevent external modification
     */
    public byte[] getBytes() {
        return bytes.clone();
    }

    /**
     * Returns a string representation of the opaque data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code OpaqueDatatype}, which typically formats the byte data as a hexadecimal
     * string or another user-defined representation.
     * </p>
     *
     * @return a string representation of the opaque data
     */
    @Override
    public String toString() {
        try {
            return datatype.getInstance(String.class, bytes);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | IOException e) {
            throw new IllegalStateException(e);
        }
    }

    /**
     * Writes the opaque data to the provided ByteBuffer.
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(bytes);
    }

    /**
     * Converts the opaque data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code OpaqueDatatype} to perform the
     * conversion, allowing the data to be interpreted as the requested type
     * (e.g., {@link String}, {@code byte[]}, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) throws IOException, InvocationTargetException, InstantiationException, IllegalAccessException {
        return datatype.getInstance(clazz, bytes);
    }
}