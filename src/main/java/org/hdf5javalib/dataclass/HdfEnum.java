package org.hdf5javalib.dataclass;

import org.hdf5javalib.datatype.EnumDatatype;

import java.nio.ByteBuffer;

/**
 * Represents an HDF5 enumeration data structure.
 * <p>
 * The {@code HdfEnum} class encapsulates an enumeration value in an HDF5 file,
 * associating raw byte data with an {@link EnumDatatype} that defines the
 * enumeration's values, names, and format. It implements the {@link HdfData}
 * interface to provide methods for accessing the data and converting it to various
 * Java types.
 * </p>
 *
 * @see HdfData
 * @see EnumDatatype
 */
public class HdfEnum implements HdfData {
    /**
     * The raw byte array containing the enumeration data.
     */
    private final byte[] bytes;
    /**
     * The EnumDatatype defining the enumeration structure, values, and format.
     */
    private final EnumDatatype datatype;

    /**
     * Constructs an HdfEnum from a byte array and a specified EnumDatatype.
     * <p>
     * This constructor initializes the HdfEnum by storing a reference to the provided
     * byte array and associating it with the given datatype. The byte array length must
     * match the size specified by the datatype, or an exception is thrown. The byte array
     * is expected to represent an enumeration value formatted according to the datatype's
     * specifications, including endianness and base datatype requirements. Note that the
     * byte array is not cloned, so modifications to the input array may affect the HdfEnum's
     * data.
     * </p>
     *
     * @param bytes    the byte array containing the enumeration data
     * @param datatype the EnumDatatype defining the enumeration structure, values, and format
     * @throws IllegalArgumentException if the byte array length does not match the datatype's size
     * @throws NullPointerException     if either {@code bytes} or {@code datatype} is null
     */
    public HdfEnum(byte[] bytes, EnumDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        if (bytes.length != datatype.getSize()) {
            throw new IllegalArgumentException(
                    String.format("Byte array length (%d) does not match datatype size (%d)",
                            bytes.length, datatype.getSize())
            );
        }
        this.bytes = bytes;
        this.datatype = datatype;
    }

    /**
     * Returns a copy of the byte array containing the enumeration data.
     *
     * @return a cloned byte array to prevent external modification
     */
    public byte[] getBytes() {
        return bytes.clone();
    }

    /**
     * Returns a string representation of the enumeration data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code EnumDatatype}, which maps the byte data to the corresponding enumeration
     * name or value string.
     * </p>
     *
     * @return a string representation of the enumeration value
     */
    @Override
    public String toString() {
        return datatype.getInstance(String.class, bytes);
    }

    /**
     * Writes the enumeration data to the provided ByteBuffer.
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(bytes);
    }

    /**
     * Converts the enumeration data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code EnumDatatype} to perform the
     * conversion, allowing the data to be interpreted as the requested type (e.g.,
     * {@link String}, {@code byte[]}, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) {
        return datatype.getInstance(clazz, bytes);
    }
}