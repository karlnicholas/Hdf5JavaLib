package org.hdf5javalib.dataclass;

import org.hdf5javalib.file.dataobject.message.datatype.FloatingPointDatatype;

import java.nio.ByteBuffer;

/**
 * Represents an HDF5 floating-point data structure.
 * <p>
 * The {@code HdfFloatPoint} class encapsulates a floating-point number in an HDF5 file,
 * associating raw byte data with a {@link FloatingPointDatatype} that defines the
 * number's format, precision, and endianness. It implements the {@link HdfData}
 * interface to provide methods for accessing the data and converting it to various
 * Java types.
 * </p>
 *
 * @see org.hdf5javalib.dataclass.HdfData
 * @see org.hdf5javalib.file.dataobject.message.datatype.FloatingPointDatatype
 */
public class HdfFloatPoint implements HdfData {
    /** The raw byte array containing the floating-point data. */
    private final byte[] bytes;
    /** The FloatingPointDatatype defining the floating-point structure, size, and format. */
    private final FloatingPointDatatype datatype;

    /**
     * Constructs an HdfFloatPoint from a byte array and a specified FloatingPointDatatype.
     * <p>
     * This constructor initializes the HdfFloatPoint by storing a cloned copy of the
     * provided byte array and associating it with the given datatype. The byte array is
     * expected to represent a floating-point number formatted according to the datatype's
     * specifications, including precision, exponent, mantissa, and endianness.
     * </p>
     *
     * @param bytes    the byte array containing the floating-point data
     * @param datatype the FloatingPointDatatype defining the floating-point structure, size, and format
     * @throws NullPointerException if either {@code bytes} or {@code datatype} is null
     */
    public HdfFloatPoint(byte[] bytes, FloatingPointDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        this.bytes = bytes.clone();
        this.datatype = datatype;
    }

    /**
     * Returns a string representation of the floating-point data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code FloatingPointDatatype}, which formats the byte data according to its
     * specifications (e.g., as a decimal floating-point number).
     * </p>
     *
     * @return a string representation of the floating-point value
     */
    @Override
    public String toString() {
        return datatype.getInstance(String.class, bytes);
    }

    /**
     * Writes the floating-point data to the provided ByteBuffer.
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(bytes);
    }

    /**
     * Converts the floating-point data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code FloatingPointDatatype} to perform
     * the conversion, allowing the data to be interpreted as the requested type
     * (e.g., {@link Double}, {@link Float}, {@link String}, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) {
        return datatype.getInstance(clazz, bytes);
    }
}