package org.hdf5javalib.dataclass;

import org.hdf5javalib.datatype.VariableLengthDatatype;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.ByteBuffer;

/**
 * Represents an HDF5 variable-length data structure.
 * <p>
 * The {@code HdfVariableLength} class encapsulates variable-length data in an HDF5 file,
 * associating raw byte data with a {@link VariableLengthDatatype} that defines the data's
 * structure, such as a sequence or string, and its format. It implements the
 * {@link HdfData} interface to provide methods for accessing the data and converting it
 * to various Java types.
 * </p>
 *
 * @see HdfData
 * @see VariableLengthDatatype
 */
public class HdfVariableLength implements HdfData {
    /**
     * The raw byte array containing the variable-length data.
     */
    private final byte[] bytes;
    /**
     * The VariableLengthDatatype defining the data structure and format.
     */
    private final VariableLengthDatatype datatype;

    /**
     * Constructs an HdfVariableLength from a byte array and a specified VariableLengthDatatype.
     * <p>
     * This constructor initializes the HdfVariableLength by storing a reference to the
     * provided byte array and associating it with the given datatype. The byte array is
     * expected to contain variable-length data (e.g., a sequence or string) formatted
     * according to the datatype's specifications, including any global heap references.
     * This constructor is typically used for HDF metadata-based initialization with
     * comprehensive parameters.
     * </p>
     *
     * @param bytes    the byte array containing the variable-length data
     * @param datatype the VariableLengthDatatype defining the data structure and format
     * @throws NullPointerException if either {@code bytes} or {@code datatype} is null
     */
    public HdfVariableLength(byte[] bytes, VariableLengthDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        this.bytes = bytes;
        this.datatype = datatype;
    }

    /**
     * Returns a copy of the byte array containing the variable-length data.
     * <p>
     * The returned array is a copy of the internal data, padded to the size specified by
     * the datatype if necessary, to prevent external modification and ensure consistency
     * with the datatype's size requirements.
     * </p>
     *
     * @return a cloned byte array of the datatype's specified size
     */
    public byte[] getBytes() {
        byte[] copy = new byte[datatype.getSize()];
        System.arraycopy(bytes, 0, copy, 0, bytes.length);
        return copy;
    }

    /**
     * Returns a string representation of the variable-length data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code VariableLengthDatatype}, which formats the byte data according to its
     * specifications (e.g., as a string or sequence of values).
     * </p>
     *
     * @return a string representation of the variable-length data
     */
    @Override
    public String toString() {
        try {
            return datatype.getInstance(String.class, bytes);
        } catch (InvocationTargetException e) {
            throw new RuntimeException(e);
        } catch (InstantiationException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Writes the variable-length data to the provided ByteBuffer.
     * <p>
     * This method writes a copy of the byte data, padded to the datatype's specified size
     * if necessary, to ensure consistency with the datatype's format.
     * </p>
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(getBytes());
    }

    /**
     * Converts the variable-length data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code VariableLengthDatatype} to perform
     * the conversion, allowing the data to be interpreted as the requested type
     * (e.g., {@link String}, array, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) throws IOException, InvocationTargetException, InstantiationException, IllegalAccessException {
        return datatype.getInstance(clazz, bytes);
    }
}