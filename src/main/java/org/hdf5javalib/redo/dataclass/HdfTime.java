package org.hdf5javalib.redo.dataclass;

import org.hdf5javalib.redo.datatype.TimeDatatype;

import java.nio.ByteBuffer;

/**
 * Represents an HDF5 time data structure.
 * <p>
 * The {@code HdfTime} class encapsulates a time value in an HDF5 file, associating
 * raw byte data with a {@link TimeDatatype} that defines the time value's size,
 * precision, and endianness. It implements the {@link HdfData} interface to provide
 * methods for accessing the data and converting it to various Java types.
 * </p>
 *
 * @see HdfData
 * @see TimeDatatype
 */
public class HdfTime implements HdfData {
    /** The raw byte array containing the time data. */
    private final byte[] bytes;
    /** The TimeDatatype defining the time structure, size, and format. */
    private final TimeDatatype datatype;

    /**
     * Constructs an HdfTime from a byte array and a specified TimeDatatype.
     * <p>
     * This constructor initializes the HdfTime by storing a reference to the provided
     * byte array and associating it with the given datatype. The byte array is expected
     * to represent a time value formatted according to the datatype's specifications,
     * including size, precision, and endianness.
     * </p>
     *
     * @param bytes    the byte array containing the time data
     * @param datatype the TimeDatatype defining the time structure, size, and format
     * @throws NullPointerException if either {@code bytes} or {@code datatype} is null
     */
    public HdfTime(byte[] bytes, TimeDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        this.bytes = bytes;
        this.datatype = datatype;
    }

    /**
     * Constructs an HdfTime from a Long value and a specified TimeDatatype.
     * <p>
     * This constructor initializes the HdfTime by converting the provided Long value
     * into a byte array of the size specified by the datatype, using the default byte
     * order (big-endian). The resulting byte array is then associated with the given
     * datatype to represent a time value.
     * </p>
     *
     * @param value    the Long value representing the time data
     * @param datatype the TimeDatatype defining the time structure, size, and format
     * @throws NullPointerException if either {@code value} or {@code datatype} is null
     */
    public HdfTime(Long value, TimeDatatype datatype) {
        if (value == null || datatype == null) {
            throw new NullPointerException("Value and datatype must not be null");
        }
        this.bytes = new byte[datatype.getSize()];
        ByteBuffer.wrap(this.bytes).putLong(value);
        this.datatype = datatype;
    }

    /**
     * Returns a copy of the byte array containing the time data.
     *
     * @return a cloned byte array to prevent external modification
     */
    public byte[] getBytes() {
        return bytes.clone();
    }

    /**
     * Returns a string representation of the time data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code TimeDatatype}, which formats the byte data according to its specifications
     * (e.g., as a numeric timestamp or formatted time string).
     * </p>
     *
     * @return a string representation of the time value
     */
    @Override
    public String toString() {
        return datatype.getInstance(String.class, bytes);
    }

    /**
     * Writes the time data to the provided ByteBuffer.
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(bytes);
    }

    /**
     * Converts the time data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code TimeDatatype} to perform the
     * conversion, allowing the data to be interpreted as the requested type
     * (e.g., {@link Long}, {@link String}, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) {
        return datatype.getInstance(clazz, bytes);
    }
}