package org.hdf5javalib.redo.dataclass;

import org.hdf5javalib.redo.datatype.CompoundMemberDatatype;

import java.nio.ByteBuffer;

/**
 * Represents a single member of an HDF5 compound data structure.
 * <p>
 * The {@code HdfCompoundMember} class encapsulates the data for a single member of a compound
 * datatype in an HDF5 file, associating raw byte data with a {@link CompoundMemberDatatype}.
 * It implements the {@link HdfData} interface to provide methods for accessing the data and
 * converting it to various Java types. This class is primarily used internally within the
 * HDF5 library to manage compound data members and should not be directly instantiated by
 * applications; instead, use {@link HdfCompound} to handle compound data.
 * </p>
 *
 * @see HdfData
 * @see HdfCompound
 * @see CompoundMemberDatatype
 */
public class HdfCompoundMember implements HdfData {
    /** The CompoundMemberDatatype defining the member's structure and format. */
    private final CompoundMemberDatatype datatype;
    /** The raw byte array containing the compound member data. */
    private final byte[] bytes;

    /**
     * Constructs an HdfCompoundMember from a byte array and a specified CompoundMemberDatatype.
     * <p>
     * This constructor initializes the HdfCompoundMember by storing a reference to the provided
     * byte array and associating it with the given datatype. The byte array contains data used
     * for lookup in the global heap or direct member data, as defined by the datatype's
     * specifications. This class is intended for internal use within the HDF5 library and should
     * not be directly constructed by applications. Instead, applications should utilize the
     * {@link HdfCompound} class to manage compound data.
     * </p>
     *
     * @param bytes    the byte array containing the compound member data for global heap lookup or direct use
     * @param datatype the CompoundMemberDatatype defining the member's structure and format
     * @throws NullPointerException if either {@code bytes} or {@code datatype} is null
     */
    public HdfCompoundMember(byte[] bytes, CompoundMemberDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        this.bytes = bytes;
        this.datatype = datatype;
    }

    /**
     * Returns a string representation of the compound member data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code CompoundMemberDatatype}, which converts the byte data to an {@link HdfData}
     * instance and then formats it as a string according to the member's datatype.
     * </p>
     *
     * @return a string representation of the compound member data
     */
    @Override
    public String toString() {
        return datatype.getInstance(HdfData.class, bytes).toString();
    }

    /**
     * Writes the compound member data to the provided ByteBuffer.
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(bytes);
    }

    /**
     * Converts the compound member data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code CompoundMemberDatatype} to perform
     * the conversion, allowing the data to be interpreted as the requested type (e.g.,
     * primitive, object, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) {
        return datatype.getInstance(clazz, bytes);
    }

    public CompoundMemberDatatype getDatatype() {
        return datatype;
    }
}