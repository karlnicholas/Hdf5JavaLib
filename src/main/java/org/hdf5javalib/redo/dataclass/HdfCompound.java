package org.hdf5javalib.redo.dataclass;

import org.hdf5javalib.redo.datatype.CompoundDatatype;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Represents an HDF5 compound data structure.
 * <p>
 * The {@code HdfCompound} class encapsulates a compound datatype in an HDF5 file,
 * associating raw byte data with a {@link CompoundDatatype} that defines the structure
 * and members of the compound. It implements the {@link HdfData} interface to provide
 * methods for accessing the data, its members, and converting it to various Java types.
 * </p>
 *
 * @see HdfData
 * @see CompoundDatatype
 */
public class HdfCompound implements HdfData {
    /** The CompoundDatatype defining the compound structure and member specifications. */
    private final CompoundDatatype datatype;
    /** The raw byte array containing the compound data. */
    private final byte[] bytes;
    /** The list of compound members, each encapsulating a portion of the byte data. */
    private final List<HdfCompoundMember> members;

    /**
     * Constructs an HdfCompound from a byte array and a specified CompoundDatatype.
     * <p>
     * This constructor initializes the HdfCompound by storing a reference to the provided
     * byte array and associating it with the given datatype. It populates a list of compound
     * members by extracting subarrays from the byte array based on each member's offset and
     * size as defined in the datatype. Each member is represented as an
     * {@link HdfCompoundMember} instance. The byte array is expected to contain compound data
     * formatted according to the datatype's specifications, including member offsets and sizes.
     * </p>
     *
     * @param bytes    the byte array containing the compound data
     * @param datatype the CompoundDatatype defining the compound structure, member offsets, and sizes
     * @throws NullPointerException if either {@code bytes} or {@code datatype} is null
     */
    public HdfCompound(byte[] bytes, CompoundDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        this.datatype = datatype;
        this.bytes = bytes;
        members = new ArrayList<>();
        datatype.getMembers().forEach(member -> {
            HdfCompoundMember hdfMember = new HdfCompoundMember(
                    Arrays.copyOfRange(bytes, member.getOffset(), member.getOffset() + member.getSize()),
                    member
            );
            members.add(hdfMember);
        });
    }

    /**
     * Returns a string representation of the compound data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code CompoundDatatype}, which formats the byte data according to its member
     * structure and types.
     * </p>
     *
     * @return a string representation of the compound data
     */
    @Override
    public String toString() {
        return datatype.getInstance(String.class, bytes);
    }

    /**
     * Writes the compound data to the provided ByteBuffer.
     * <p>
     * This method writes the data by iterating through the compound members and delegating
     * to each {@link HdfCompoundMember} to write its portion of the data to the buffer
     * in the correct order.
     * </p>
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        members.forEach(member -> member.writeValueToByteBuffer(buffer));
    }

    /**
     * Converts the compound data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code CompoundDatatype} to perform the
     * conversion, allowing the data to be interpreted as the requested type (e.g., a
     * POJO, String, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) {
        return datatype.getInstance(clazz, bytes);
    }

    public List<HdfCompoundMember> getMembers() {
        return members;
    }
}