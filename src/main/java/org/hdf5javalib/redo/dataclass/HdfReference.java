package org.hdf5javalib.redo.dataclass;

import org.hdf5javalib.redo.datatype.ReferenceDatatype;

import java.nio.ByteBuffer;

/**
 * Represents an HDF5 reference data structure.
 * <p>
 * The {@code HdfReference} class encapsulates a reference in an HDF5 file, associating
 * raw byte data with a {@link ReferenceDatatype} that defines the reference type (e.g.,
 * object or dataset region reference) and format. It implements the {@link HdfData}
 * interface to provide methods for accessing the data and converting it to various
 * Java types.
 * </p>
 *
 * @see HdfData
 * @see ReferenceDatatype
 */
public class HdfReference implements HdfData {
    /** The raw byte array containing the reference data. */
    private final byte[] bytes;
    /** The ReferenceDatatype defining the reference type and format. */
    private final ReferenceDatatype datatype;

    /**
     * Constructs an HdfReference from a byte array and a specified ReferenceDatatype.
     * <p>
     * This constructor initializes the HdfReference by storing a cloned copy of the
     * provided byte array and associating it with the given datatype. The byte array
     * is expected to represent a reference (e.g., to an object or dataset region)
     * formatted according to the datatype's specifications.
     * </p>
     *
     * @param bytes    the byte array containing the reference data
     * @param datatype the ReferenceDatatype defining the reference type and format
     * @throws NullPointerException if either {@code bytes} or {@code datatype} is null
     */
    public HdfReference(byte[] bytes, ReferenceDatatype datatype) {
        if (bytes == null || datatype == null) {
            throw new NullPointerException("Bytes and datatype must not be null");
        }
        this.bytes = bytes.clone();
        this.datatype = datatype;
    }

    /**
     * Returns a copy of the byte array containing the reference data.
     *
     * @return a cloned byte array to prevent external modification
     */
    public byte[] getBytes() {
        return bytes.clone();
    }

    /**
     * Returns a string representation of the reference data.
     * <p>
     * The string representation is generated by delegating to the associated
     * {@code ReferenceDatatype}, which typically formats the byte data as a
     * hexadecimal string with the reference type.
     * </p>
     *
     * @return a string representation of the reference
     */
    @Override
    public String toString() {
        return datatype.getInstance(String.class, bytes);
    }

    /**
     * Writes the reference data to the provided ByteBuffer.
     *
     * @param buffer the ByteBuffer to write the byte data to
     */
    @Override
    public void writeValueToByteBuffer(ByteBuffer buffer) {
        buffer.put(bytes);
    }

    /**
     * Converts the reference data to an instance of the specified Java class.
     * <p>
     * This method delegates to the associated {@code ReferenceDatatype} to perform
     * the conversion, allowing the data to be interpreted as the requested type
     * (e.g., {@link String}, {@code byte[]}, or other supported types).
     * </p>
     *
     * @param <T>   the type of the instance to be created
     * @param clazz the Class object representing the target type
     * @return an instance of type T created from the byte data
     * @throws UnsupportedOperationException if the datatype cannot convert to the requested type
     */
    @Override
    public <T> T getInstance(Class<T> clazz) {
        return datatype.getInstance(clazz, bytes);
    }
}